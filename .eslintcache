[{"C:\\Users\\victo\\OneDrive\\Рабочий стол\\klika-tech proj\\klika-tech\\src\\index.js":"1","C:\\Users\\victo\\OneDrive\\Рабочий стол\\klika-tech proj\\klika-tech\\src\\App.js":"2"},{"size":231,"mtime":1607980129105,"results":"3","hashOfConfig":"4"},{"size":3671,"mtime":1607980455696,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"e4zfna",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\victo\\OneDrive\\Рабочий стол\\klika-tech proj\\klika-tech\\src\\index.js",[],["12","13"],"C:\\Users\\victo\\OneDrive\\Рабочий стол\\klika-tech proj\\klika-tech\\src\\App.js",["14"],"import React, {Component} from 'react'\nimport './style.css';\n\nconst useSortableData = (items, config = null) => {\n\n  \n  const [sortConfig, setSortConfig] = React.useState(config);\n\n  const sortedItems = React.useMemo(() => {\n    let sortableItems = [...items];\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [items, sortConfig]);\n\n  const requestSort = (key) => {\n    let direction = 'ascending';\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === 'ascending'\n    ) {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return { items: sortedItems, requestSort, sortConfig };\n};\n\nconst ArtistTable = (props) => {\n  const { items, requestSort, sortConfig } = useSortableData(props.artists);\n  const getClassNamesFor = (name) => {\n    if (!sortConfig) {\n      return;\n    }\n    return sortConfig.key === name ? sortConfig.direction : undefined;\n  };\n  return (\n    <div className=\"wrapper\">\n      <div className=\"content\">\n      <table>\n      <caption>\n      <h2>My TOP favorite artist</h2>\n      </caption>\n      <thead>\n        <tr>\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => requestSort('name')}\n              className={getClassNamesFor('name')}\n            >\n              Name\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => requestSort('year')}\n              className={getClassNamesFor('year')}\n            >\n              Year\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => requestSort('genre')}\n              className={getClassNamesFor('genre')}\n            >\n              Genre\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {items.map((item) => (\n          <tr key={item.id}>\n            <td>{item.name}</td>\n            <td>{item.year}</td>\n            <td>{item.genre}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n    </div>\n    </div>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <ArtistTable\n        artists={[\n        { id: 1, name: 'Machine Gun Kelly', year: 2012, genre: 'rap' },\n        { id: 2, name: 'Imagine Dragons', year: 2014, genre: 'indi' },\n        { id: 3, name: 'Linkin Park', year: 2001, genre: 'rock' },\n        { id: 4, name: 'Bastille', year: 2010 , genre: 'indi-pop' },\n        { id: 5, name: 'Travis Scott', year: 2018, genre: 'hiphop' },\n        { id: 6, name: 'The Weeknd', year: 2016, genre: '‎r&b' },\n        { id: 7, name: 'XXXTentacion', year: 2017, genre: 'rap' },\n        { id: 8, name: 'Pop Smoke', year: 2020, genre: 'drill' },\n        { id: 9, name: 'Bullet for My Valentine', year: 2003, genre: 'metalcore' },\n        { id: 10, name: 'Asking Alexandria', year: 2009 , genre: 'rock' },\n        { id: 11, name: 'My Chemical Romance', year: 2013, genre: 'postrock' },\n        { id: 12, name: 'Papa Roach', year: 2017, genre: 'rock' },\n        { id: 13, name: 'Placebo', year: 2011, genre: 'indi-rock' },\n        { id: 14, name: 'Cigarettes After Sex', year: 2015, genre: 'indi' },\n        { id: 15, name: 'The Neighbourhood', year: 2018, genre: 'indi-rock' },\n       ]}\n      />\n    </div>\n  );\n}\n\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":1,"column":16,"nodeType":"21","messageId":"22","endLine":1,"endColumn":25},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]